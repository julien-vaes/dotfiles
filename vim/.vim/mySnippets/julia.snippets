global !p

# Function to transorm camel style to snake style
_underscorer1 = re.compile(r'(.)([A-Z][a-z]+)')
_underscorer2 = re.compile('([a-z0-9])([A-Z])')

def camelToSnake(s):
    """ 
    Is it ironic that this function is written in camel case, yet it
    converts to snake case? hmm..
    """
    subbed = _underscorer1.sub(r'\1_\2', s)
    return _underscorer2.sub(r'\1_\2', subbed).lower()

# General functions

# returns the file name
def get_file_name(snip):
	return snip.fn # splits a string with , and returns a table

def get_args(arglist):
	args = []
	argssepcomma = arglist.split(',')
	myCurrentArg = ''

        # builds the arguments
	for i in range(0,len(argssepcomma)):
		if myCurrentArg != "":
			myCurrentArg += ','
		myLocalArg = argssepcomma[i]
		myLocalArg = myLocalArg.replace('\n','')
		myLocalArg = myLocalArg.replace('\t','')
		myLocalArg = myLocalArg.replace(' ','')

		tabifsep = myLocalArg.split(';')
		if len(tabifsep) > 1:
			myCurrentArg += tabifsep[0]
			args += [myCurrentArg]
			myCurrentArg = ";" + tabifsep[1]
		else:
			myCurrentArg += myLocalArg

		myNOpenings = 0
		myNClosings = 0
		for letter in myCurrentArg:
			if letter == '{':
				myNOpenings += 1
			if letter == '(':
				myNOpenings += 1
			if letter == '}':
				myNOpenings -= 1
			if letter == ')':
				myNOpenings -= 1
		if myNOpenings == myNClosings:
			args += [myCurrentArg]
			myCurrentArg = ""

	return args

def get_string_args_from_tab(aTab):
	myString = ""
	i = 0
	for aArg in aTab:
		if i > 0:
			if ';' in aArg:
				myString += ";"
			else:
				myString += ","
			myString += "\n"
		myString += aArg.replace(';','')
		i += 1
	return myString

# Function to describe the function with a snippet

def write_function_start_doc(t,snip):
	snip += '"""'
	snip += '```'
	snip += "%s(\n%s\n)" % (t[1],get_string_args_from_tab(get_args(t[2])))
	snip += '```'
	snip.rv += '\n' + snip.mkline('', indent='')

def function_argument_format(arg):
	return "* `%s`: TODO." % arg

def write_function_arguments_doc(t,snip):
	args = get_args(t[2])
	if args:
		# checks if several arguments in order to choose to put a "s" or not at the end of "Argument"
		myS = ""
		if len(args) > 1:
			myS = "s"
		# Argument definition
		snip += "### Argument%s" % myS
		for arg in args:
			arg = arg.replace(';','')
			snip += function_argument_format(arg)
	snip += '"""'

# Function to describe a structure with a snippet

def write_structure_start_doc(t, snip):
	snip += "# A structure containing all details for a %s." % t[1].lower()

def strucure_attribute_format(attribute):
	return "\t%s \t # TODO." % attribute

def write_structure_attributes_doc(t, snip):
	attributes = get_args(t[2])
	if not attributes:
		return
	else:
		for attr in attributes:
			snip += strucure_attribute_format(attr)

## Functions to write the get function associated with a structure
def write_get_function(aStructureName, aAttribute, snip):
	myAttribute = aAttribute.split("::")
	myAttributeType = ""
	if len(myAttribute) > 1:
		myAttributeType = myAttribute[1]
	myAttributeBasic = myAttribute[0]
	myAttribute = myAttributeBasic.split("the")
	myAttribute = myAttribute[-1]
	myAttributeSnake = camelToSnake(myAttribute)
	myName = "get_%s" % myAttributeSnake
	myArgument = "a%s::%s" % (aStructureName,aStructureName)
	t = ["", myName, myArgument]

	write_function_start_doc(t,snip)
	snip += "returns the attribute `%s` of the structure `a%s`.\n" % (myAttributeBasic, aStructureName)
	write_function_arguments_doc(t,snip)

	snip += "function %s(%s)" % (myName,myArgument)
	snip += "\treturn a%s.%s\nend\n" % (aStructureName,myAttributeBasic)
	
def write_get_functions(t, snip):
	myStructureName = t[1]
	args = get_args(t[2])
	if not args:
		return
	else:
		# Introductory message
		myS = ""
		if len(args) > 1:
			myS = "s"
		snip += "## STRUCTURE %s: get function%s" % (t[1], myS)
		# Function definition
		for attribute in args:
			write_get_function(myStructureName, attribute, snip)

## Functions to write the set function associated with a structure
def write_set_function(aStructureName, aAttribute, snip):
	myAttribute = aAttribute.split("::")
	myAttributeType = ""
	if len(myAttribute) > 1:
		myAttributeType = myAttribute[1]
	myAttributeBasic = myAttribute[0]
	myAttribute = myAttributeBasic.split("the")
	myAttribute = myAttribute[-1]
	myAttributeSnake = camelToSnake(myAttribute)
	myName = "set_%s!" % myAttributeSnake
	myArguments = "a%s::%s, aNew%s::%s" % (aStructureName, aStructureName, myAttribute, myAttributeType)
	t = ["", myName, myArguments]

	write_function_start_doc(t,snip)
	snip += "assigns to the attribute `%s` of the structure `a%s` the value `%s`.\n" % (myAttributeBasic, aStructureName, myAttributeBasic)
	write_function_arguments_doc(t,snip)

	snip += "function %s(%s)" % (myName,myArguments)
	snip += "\ta%s.%s = aNew%s\nend\n" % (aStructureName, myAttributeBasic, myAttribute)

def write_set_functions(t, snip):
	myStructureName = t[1]
	args = get_args(t[2])
	if not args:
		return
	else:
		# Introductory message
		myS = ""
		if len(args) > 1:
			myS = "s"
		snip += "## STRUCTURE %s: set function%s" % (t[1], myS)
		# Function definition
		for attribute in args:
			write_set_function(myStructureName, attribute, snip)


def get_function_name_and_arguments(aString):

    myLocalString = aString
    myLocalString = myLocalString.replace(' ','')
    myLocalString = myLocalString.replace('\n','')
    myLocalString = myLocalString.replace('\t','')
    myLocalString = myLocalString.replace(')','')
    myLocalString = myLocalString.replace('function','')
    myTab = myLocalString.split('(')

    return myTab

def write_function_doc_a_posteriori(t,snip):
	# gets the table with the name of the function and its arguments
	myt = get_function_name_and_arguments(t[1])
	myt = [t[0]] + myt

	write_function_start_doc(myt,snip)
	snip += 'TODO function description.\n'

	write_function_arguments_doc(myt,snip)

	return 1

endglobal

# Snippets definition

# the comments block at the start of each document.
snippet sc "Document introductory comments" b
# NAME: `!p snip.rv = get_file_name(snip)`
# AUTHOR: Julien Vaes
# DATE: `date +"%B %d, %Y"`
# DESCRIPTION: ${1:TODO: Description of the file content}

$0
endsnippet

snippet fun "Function with documentation" b
`!p write_function_start_doc(t,snip) `
${3:TODO function description.}
`!p write_function_arguments_doc(t,snip) `
function ${1:function_name}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:Argument1, Argument2, ...})
	${5:${VISUAL:nothing}}
end

endsnippet

snippet dfun "write the doc of a function a posteriori" b
`!p write_function_doc_a_posteriori(t,snip) `
${1:function name(args)}
$0
endsnippet

snippet stru "Structure with documentation" b
### START: STRUCTURE $1 ###
`!p write_structure_start_doc(t, snip) `
# The attribute in the structure: `!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:Attribute1, Attribute2, ...}
struct ${1:StructureName} `!p 
write_structure_attributes_doc(t, snip) `
end

### END: STRUCTURE $1 ###

endsnippet

snippet strug "Structure with documentation and get functions" b
### START: STRUCTURE $1 ###

`!p write_structure_start_doc(t, snip) `
# The attributes in the structure: `!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:Attribute1, Attribute2, ...}
struct ${1:StructureName} `!p 
write_structure_attributes_doc(t, snip) `
end

`!p write_get_functions(t, snip) `
### END: STRUCTURE $1 ###

endsnippet

snippet strugs "Structure with documentation and (get,set) functions" b
### START: STRUCTURE $1 ###
`!p write_structure_start_doc(t, snip) `
# The attributes in the structure: `!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:Attribute1, Attribute2, ...}
mutable struct ${1:StructureName} `!p 
write_structure_attributes_doc(t, snip) `
end

`!p write_get_functions(t, snip) `
`!p write_set_functions(t, snip) `
### END: STRUCTURE $1 ###

endsnippet

snippet err "create the structure for an error message" b
@error(
	string(
		"\n${1:Module Name} ${2:101}:\n",
		"${3:Error Text}",
		${4:Error Variable},
		"."
		)
	)
	$0
endsnippet

snippet war "create the structure for a warning message" b
@war(
	string(
		"\n${1:Module Name} ${2:101}:\n",
		"${3:Warning Text}",
		${4:Warning Variable},
		"."
		)
	)
	$0
endsnippet

snippet inf "create the structure for an info message" b
HelpFilesModule.info_logs(
		HelpFilesModule.info_logs(
			string(
				"\n${1:Module Name} ${2:101}:\n",
				"${3:Info Text}",
				${4:Info Variable},
				"."
				),
			aSimulationParameters,
			myStacktrace
			)
		)

$0
endsnippet

snippet pp "parentise" i
($1)$0
endsnippet
